GFP <- RunPCA(GFP, features = VariableFeatures(object = GFP))
GFP <- FindNeighbors(GFP,dims = 1:dimnum)
GFP <- FindClusters(GFP,resolution = 0.7)
GFP <- RunUMAP(GFP,dims = 1:dimnum)
DimPlot(GFP,coord.fixed = T,label = T)
ggsave(paste(dimnum,".png",sep = ""))
dimnum<-dimnum+1
}
# GFP <- JackStraw(GFP, num.replicate = 100)
# GFP <- ScoreJackStraw(GFP,dims = 1:13)
# JackStrawPlot(GFP,dims = 1:13)
GFP <- FindNeighbors(GFP,dims = 1:18)
GFP <- FindClusters(GFP,resolution = 0.7)
# GFP <- RunTSNE(GFP,dims = 1:10)
GFP <- RunUMAP(GFP,dims = 1:18)
DimPlot(GFP,coord.fixed = T)
saveRDS(GFP,"updated_data/abcd_with_gfp.Robj")
saveRDS(GFP,"../THESIS/updated_data/abcd_with_gfp.Robj")
# cluster old data.
OLD <- FindVariableFeatures(OLD, selection.method = "vst",nfeatures = 2000)
all.genes <- rownames(OLD)
OLD <- ScaleData(OLD,features = all.genes)
OLD <- RunPCA(OLD, features = VariableFeatures(object = OLD))
# OLD <- JackStraw(OLD, num.replicate = 100)
# OLD <- ScoreJackStraw(OLD,dims = 1:13)
# JackStrawPlot(OLD,dims = 1:13)
OLD <- FindNeighbors(OLD,dims = 1:10)
OLD <- FindClusters(OLD,resolution = 0.7)
# OLD <- RunTSNE(OLD,dims = 1:10)
OLD <- RunUMAP(OLD,dims = 1:10)
DimPlot(OLD,coord.fixed = T)
saveRDS(OLD,"updated_data/ABCD_OLD.Robj")
saveRDS(OLD,"../THESIS/updated_data/ABCD_OLD.Robj")
GFP_anotated <- readRDS("../THESIS/updated_data/abcd_with_gfp.Robj")
library(Seurat)
GFP <- readRDS("../THESIS/updated_data/abcd_with_gfp.Robj")
GFP <- readRDS("../../THESIS/updated_data/abcd_with_gfp.Robj")
DimPlot(GF{})
DimPlot(GFP)
DimPlot(GFP,label = T)
library("devtools")
document()
install("CSO")
setwd("C:/Users/Aaron/Desktop/Rpackage")
install("CSO")
library("CSO")
clusterDifference
clusterDifference()
ClusterDifference()
document()
setwd("C:/Users/Aaron/Desktop/Rpackage/CSO")
setwd("C:/Users/Aaron/Desktop/Rpackage/CSO")
document()
ClusterDifference()
ClusterDifference(GFP,'2',GFP,'4')
ClusterDifference(GFP,'0',GFP,'4')
library(Seurat)
library("devtools")
install("CSO")
setwd("C:/Users/Aaron/Desktop/Rpackage")
install("CSO")
document()
setwd("C:/Users/Aaron/Desktop/Rpackage/CSO")
document()
OLD <- readRDS("../THESIS/updated_data/ABCD_old.Robj")
GFP <- readRDS("../THESIS/updated_data/abcd_with_gfp.Robj")
setwd("C:/Users/Aaron/Desktop/Rpackage")
OLD <- readRDS("../THESIS/updated_data/ABCD_old.Robj")
GFP <- readRDS("../THESIS/updated_data/abcd_with_gfp.Robj")
t <- CheckCellCoverage(OLD,GFP)
r
y
t
t <- CheckCellCoverage(OLD,GFP)
r <- MakeConfusionMatrix(GFP,OLD)
so1 <- GFP
so2<- OLD
library(Seurat)
d1 <- subset(so1,idents = c1)
d2 <- subset(so2,idents = c2)
c1 <- 3
c2 <- 4
d1 <- subset(so1,idents = c1)
d2 <- subset(so2,idents = c2)
DimPlot(D1)
DimPlot(d1)
DimPlot(d2)
FeaturePlot(d1,"CRABP1")
FeaturePlot(d2,"CRABP1")
FeaturePlot(d1,"CRABP1")
table(d1)
table(d1$orig.ident)
table(d1$original)
d1@assays$RNA@scale.data
head(d1@assays$RNA@scale.data)
head( d1@assays$RNA@scale.data )
d1@assays$RNA@scale.data[1,]
d1@assays$RNA@scale.data[1:2,]
d1@assays$RNA@scale.data[2,]
d1@assays$RNA@scale.data[1,]
genes <- rownames(d1)
returngenes <- c()
i<- 1
threshold <-0.06/(length(genes)*2)
threshold <-0.05/(length(genes)*2)
0.05/(23857*2)
threshold <-0.05/(length(genes)*2)
while (i <= length(genes)) {
if (mean(df1[i,]) != mean(df2[i,])){
r <- t.test(df1[i,],df2[i,])
if(r$p.value <= threshold){
returngenes <- c(returngenes,genes[i])
#print(r)
}
}
i <- i+1
}
df1 <- d1@assays$RNA@scale.data
df2 <- d2@assays$RNA@scale.data
genes <- rownames(d1)
returngenes <- c()
i<- 1
threshold <-0.05/(length(genes)*2)
while (i <= length(genes)) {
if (mean(df1[i,]) != mean(df2[i,])){
r <- t.test(df1[i,],df2[i,])
if(r$p.value <= threshold){
returngenes <- c(returngenes,genes[i])
#print(r)
}
}
i <- i+1
}
df1
df2
df2[1]
View(df2)
genes <- rownames(d2)
1
genes <- rownames(d1)
genes2 <- rownames(d2)
genes1 <- rownames(d1)
intersect(genes1,genes2)
length(intersect(genes1,genes2))
df2c <- df2[order(row.names(df2)),]
df1 <- df1[order(row.names(df1)),]
df2 <- df2[order(row.names(df2)),]
genes1 <- rownames(d1)
genes2 <- rownames(d2)
View(df2)
View(df2c)
genes1 <- rownames(d1)
genes2 <- rownames(d2)
genes1 <- rownames(df1)
genes2 <- rownames(df2)
mean(df1[i,]
)
mean(df1[1,])
mean(df2[1,])
mean(df1["7SK",])
mean(df2["7SK",])
ana_gene <- intersect(genes1,genes2)
threshold <-0.05/(length(ana_gene)*2)
for (g in ana_gene) {
print(g)
}
for (g in ana_gene) {
print(g)
print(mean(df1[g,]))
print(mean(df2[g,]))
}
for (g in ana_gene) {
if (mean(df1[g,]) != mean(df2[g,])){
r <- t.test(df1[g,],df2[g,])
if(r$p.value <= threshold){
returngenes <- c(returngenes,g)
#print(r)
}
}
}
mean(df2[g,])
mean(df1[g,])
head(ana_gene)
for (g in ana_gene) {
print(g)
if (mean(df1[g,]) != mean(df2[g,])){
r <- t.test(df1[g,],df2[g,])
if(r$p.value <= threshold){
returngenes <- c(returngenes,g)
#print(r)
}
}
}
mean(df1[g,])
mean(df2[g,])
mean(df2[g,]) == mean(df1[g,])
t.test(df1[g,],df2[g,])
df2[g,]
df1[g,]
df2[g,]
df1[g,]
r
r <- t.test(df1[g,],df2[g,])
df1[g,]
df2[g,]
df1[g,]
range(df2[g,])
range(df2[g,])[1]
range(df2[g,])[3]
range(df2[g,])[2]
ana_gene <- intersect(genes1,genes2)
returngenes <- c()
plist<-c()
i<- 1
threshold <-0.05/(length(ana_gene)*2)
for (g in ana_gene) {
print(g)
if (mean(df1[g,]) != mean(df2[g,]) || (range(df1[g,])[1]==range(df1[g,])[2] && range(df2[g,])[1]==range(df2[g,])[2] )    ){
r <- t.test(df1[g,],df2[g,])
if(r$p.value <= threshold){
returngenes <- c(returngenes,g)
plist <- c(plist,r$p.value)
#print(r)
}
}
}
range(df1[g,])[1]==range(df1[g,])[2]
returngenes <- c()
plist<-c()
i<- 1
threshold <-0.05/(length(ana_gene)*2)
for (g in ana_gene) {
print(g)
if (mean(df1[g,]) != mean(df2[g,]) || (range(df1[g,])[1]!=range(df1[g,])[2] && range(df2[g,])[1]!=range(df2[g,])[2] )    ){
r <- t.test(df1[g,],df2[g,])
if(r$p.value <= threshold){
returngenes <- c(returngenes,g)
plist <- c(plist,r$p.value)
#print(r)
}
}
}
range(df1[g,])[1]==range(df1[g,])[2]
range(df2[g,])[1]==range(df2[g,])[2]
returngenes <- c()
plist<-c()
i<- 1
threshold <-0.05/(length(ana_gene)*2)
for (g in ana_gene) {
print(g)
if (range(df1[g,])[1]!=range(df1[g,])[2] || range(df2[g,])[1]!=range(df2[g,])[2] )    {
r <- t.test(df1[g,],df2[g,])
if(r$p.value <= threshold){
returngenes <- c(returngenes,g)
plist <- c(plist,r$p.value)
#print(r)
}
}
}
r <- t.test(df1["A2M",],df2["A2M",])
r
FeaturePlot(d1,"A1BG")
FeaturePlot(d2,"A1BG")
FeaturePlot(d1,"A1BG")
FeaturePlot(d1,"A2M")
FeaturePlot(d2,"A2M")
do.call(rbind, Map(data.frame, A=returngenes, B=plist))
dfr <- do.call(rbind, Map(data.frame, A=returngenes, B=plist))
View(dfr)
dfr <- do.call(rbind, Map(data.frame, Gene=returngenes, p.value=plist))
View(dfr)
FeaturePlot(d2,"LUM")
FeaturePlot(d1,"LUM")
FeaturePlot(d2,"LUM")
DimPlot(GFP)
DimPlot(OLD)
MakeConfusionMatrix(GFP,OLD)
c1<- 13
c2<- 1
library(Seurat)
d1 <- subset(so1,idents = c1)
d2 <- subset(so2,idents = c2)
df1 <- d1@assays$RNA@scale.data
df2 <- d2@assays$RNA@scale.data
df1 <- df1[order(row.names(df1)),]
df2 <- df2[order(row.names(df2)),]
genes1 <- rownames(df1)
genes2 <- rownames(df2)
ana_gene <- intersect(genes1,genes2)
returngenes <- c()
plist<-c()
i<- 1
threshold <-0.05/(length(ana_gene)*2)
for (g in ana_gene) {
print(g)
if (range(df1[g,])[1]!=range(df1[g,])[2] || range(df2[g,])[1]!=range(df2[g,])[2] )    {
r <- t.test(df1[g,],df2[g,])
if(r$p.value <= threshold){
returngenes <- c(returngenes,g)
plist <- c(plist,r$p.value)
#print(r)
}
}
}
dfr <- do.call(rbind, Map(data.frame, Gene=returngenes, p.value=plist))
View(dfr)
FeaturePlot(df1,"TNNT2")
FeaturePlot(d1,"TNNT2")
FeaturePlot(d2,"TNNT2")
FeaturePlot(d1,"TNNT2")
FeaturePlot(d2,"TNNT2")
DimPlot(OLD,label = T)
FeaturePlot(d2,"TNNT2")
DimPlot(GFP,label = T)
FeaturePlot(d1,"TNNT2")
FeaturePlot(d2,"TNNT2")
FeaturePlot(d2,"ACTC1")
FeaturePlot(d1,"ACTC1")
document()
setwd("C:/Users/Aaron/Desktop/Rpackage/CSO")
document()
##############################################################################
table(Idents(old_anotated),old_anotated$orig.ident)
document()
install("CSO")
setwd("C:/Users/Aaron/Desktop/Rpackage")
install("CSO")
library("CSO")
DimPlot(OLD,label = T)
setwd("C:/Users/Aaron/Desktop/Rpackage/CSO")
document()
DimPlot(OLD,label = T)
DimPlot(GFP,label = T)
t <- CheckCellCoverage(OLD,GFP)
r <- MakeConfusionMatrix(GFP,OLD)
df <- ClusterDifference(GFP,8,OLD,8)
View(df)
FeaturePlot(GFP,"CADM1")
FeaturePlot(OLD,"CADM1")
FeaturePlot(GFP,"CADM1")
FeaturePlot(OLD,"CADM1")
OLD <- readRDS("../THESIS/updated_data/ABCD_old.Robj")
setwd("..")
library("devtools")
install("CSO")
library("Seurat")
library("CSO")
setwd("C:/Users/Aaron/Desktop/Rpackage/CSO")
document()
setwd("C:/Users/Aaron/Desktop/Rpackage")
OLD <- readRDS("../THESIS/updated_data/ABCD_old.Robj")
GFP <- readRDS("../THESIS/updated_data/abcd_with_gfp.Robj")
##############################################################################
table(Idents(old_anotated),old_anotated$orig.ident)
table(Idents(GFP_anotated),GFP_anotated$orig.ident)
DimPlot(OLD,label = T)
DimPlot(GFP,label = T)
t <- CheckCellCoverage(OLD,GFP)
r <- MakeConfusionMatrix(GFP,OLD)
df <- ClusterDifference(GFP,3,OLD,4)
View(df)
DimPlot(GFP,label = T)
DimPlot(OLD,label = T)
FeaturePlot(GFP,"LUM")
FeaturePlot(OLD,"LUM")
DimPlot(OLD,label = T)
FeaturePlot(GFP,"LUM")
r <- MakeConfusionMatrix(GFP,OLD)
library("devtools")
install("CSO")
document()
setwd("C:/Users/Aaron/Desktop/Rpackage")
library("CSO")
OLD <- readRDS("../THESIS/updated_data/ABCD_old.Robj")
GFP <- readRDS("../THESIS/updated_data/abcd_with_gfp.Robj")
r <- MakeConfusionMatrix(GFP,OLD)
r <- MakeConfusionMatrix(GFP,OLD)
document()
library("CSO")
library("devtools")
document()
document()
library("devtools")
install("CSO")
setwd("..")
library("devtools")
install("CSO")
library("Seurat")
library("CSO")
document("./CSO")
jane <- readRDS("../THESIS/analysis_jane/RemapedAggregate_clustered.Robj")
A <- readRDS("../THESIS/updated_data/A_GFP_anotated_j.Robj")
df <- ClusterDifference(jane,12,A,11)
View(df)
so1 <- jane
so2 <- A
c1 <- 12
c2 <- 11
c1 <- 2
d1 <- subset(so1,idents = c1)
d2 <- subset(so2,idents = c2)
df1 <- d1@assays$RNA@scale.data
df2 <- d2@assays$RNA@scale.data
df1 <- df1[order(row.names(df1)),]
df2 <- df2[order(row.names(df2)),]
genes1 <- rownames(df1)
print("sample 1 has")
cat(length(genes1))
print("genes")
genes2 <- rownames(df2)
print("sample 2 has")
cat(length(genes2))
print("genes")
ana_gene <- intersect(genes1,genes2)
print("only analyze:")
print(length(ana_gene))
print(" numbers of genes")
returngenes <- c()
plist<-c()
i<- 1
threshold <-0.05/(length(ana_gene)*2)
for (g in ana_gene) {
if (range(df1[g,])[1]!=range(df1[g,])[2] || range(df2[g,])[1]!=range(df2[g,])[2] )    {
r <- t.test(df1[g,],df2[g,])
if(r$p.value <= threshold){
returngenes <- c(returngenes,g)
plist <- c(plist,r$p.value)
print(r)
}
}
}
VlnPlot(A,"PLA2G7")
VlnPlot(jane,"PLA2G7")
VlnPlot(jane,"LYZ")
VlnPlot(A,"LYZ")
d1@assays$RNA
d1@assays$RNA@data
d1@assays$RNA@scale.data
d1
d1$nFeature_RNA
d1$nCount_RNA
d1@assays
d1@assays$RNA
GetAssayData(d1)
GetAssayData(d1,slot = "data")
GetAssayData(d1,"data")
d1 <- subset(so1,idents = c1)
d2 <- subset(so2,idents = c2)
df1 <- GetAssayData(d1,"data")
df2 <- GetAssayData(d2,"data")
df1 <- df1[order(row.names(df1)),]
df2 <- df2[order(row.names(df2)),]
genes1 <- rownames(df1)
print("sample 1 has")
cat(length(genes1))
print("genes")
genes2 <- rownames(df2)
print("sample 2 has")
cat(length(genes2))
print("genes")
ana_gene <- intersect(genes1,genes2)
print("only analyze:")
print(length(ana_gene))
df1
View(df1)
print(" numbers of genes")
returngenes <- c()
plist<-c()
i<- 1
threshold <-0.05/(length(ana_gene)*2)
for (g in ana_gene) {
if (range(df1[g,])[1]!=range(df1[g,])[2] || range(df2[g,])[1]!=range(df2[g,])[2] )    {
r <- t.test(df1[g,],df2[g,])
if(r$p.value <= threshold){
returngenes <- c(returngenes,g)
plist <- c(plist,r$p.value)
print(r)
}
}
}
dfr <- do.call(rbind, Map(data.frame, Gene=returngenes, p.value=plist))
View(dfr)
VlnPlot(jane,"RAB27B")
VlnPlot(A,"RAB27B")
FeaturePlot(jane,"RAB27B")
FeaturePlot(A,"RAB27B")
FeaturePlot(jane,"RAB27B")
old_anotate <- readRDS("../THESIS/updated_data/abcd_anotate.Robj")
setwd("..")
library("devtools")
install("CSO")
library("Seurat")
library("CSO")
document("./CSO")
old_anotate <- readRDS("../THESIS/updated_data/abcd_anotate.Robj")
table(old_anotated$orig.ident)
old_anotated <- readRDS("../THESIS/updated_data/abcd_anotate.Robj")
rm(old_anotated)
rm(old_anotate)
old_anotated <- readRDS("../THESIS/updated_data/abcd_anotate.Robj")
table(old_anotated$orig.ident)
GFP <- readRDS("../THESIS/updated_data/abcd_with_gfp.Robj")
table(GFP$orig.ident)
jane <- readRDS("../THESIS/analysis_jane/RemapedAggregate_clustered.Robj")
setwd("..")
library("devtools")
install("CSO")
library("Seurat")
library("CSO")
document("./CSO")
jane <- readRDS("../THESIS/analysis_jane/RemapedAggregate_clustered.Robj")
table(jane$GroupID)
